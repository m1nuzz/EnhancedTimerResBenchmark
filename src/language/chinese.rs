//! Chinese language support for timer resolution benchmarking

use crate::ui::localization_key::LocalizationKey;

impl LocalizationKey {
    /// Get Chinese translation
    pub fn get_chinese(&self) -> &'static str {
        match self {
            LocalizationKey::Title => "🚀 增强型计时器分辨率基准测试工具",
            LocalizationKey::SystemInfo => "📊 系统信息",
            LocalizationKey::WorkingDir => "📂 工作目录: {}",
            LocalizationKey::AdminPrivileges => "🛡️ 管理员权限: ✓ 已确认",
            LocalizationKey::WindowsVersion => "🖥️ Windows 版本: {}",
            LocalizationKey::Cpu => "💻 CPU: {}",
            LocalizationKey::SystemConfig => "🔧 系统配置",
            LocalizationKey::HpetStatus => "HPET 状态: {}",
            LocalizationKey::BenchmarkParams => "⚙️ 基准测试参数",
            LocalizationKey::StartValue => "起始值",
            LocalizationKey::IncrementValue => "增量值",
            LocalizationKey::EndValue => "结束值",
            LocalizationKey::SampleValue => "样本值",
            LocalizationKey::Iterations => "迭代次数",
            LocalizationKey::Dependencies => "🔍 检查依赖项",
            LocalizationKey::Found => "✓ 已找到: {}",
            LocalizationKey::MissingDeps => "❌ 错误: 缺少依赖项: {}",
            LocalizationKey::RobustOptimization => "🎯 计时器鲁棒优化",
            LocalizationKey::Parameters => "📊 参数:",
            LocalizationKey::Range => "范围: [{:.4}, {:.4}] 毫秒",
            LocalizationKey::IterationsCount => "迭代次数: {}",
            LocalizationKey::RunsPerPoint => "每点运行次数: {}",
            LocalizationKey::SamplesPerRun => "每次运行样本数: {}",
            LocalizationKey::Weights => "权重: 精度={:.0}%, 稳定性={:.0}%, 最坏情况={:.0}%",
            LocalizationKey::Accuracy => "精度",
            LocalizationKey::Stability => "稳定性", 
            LocalizationKey::WorstCase => "最坏情况",
            LocalizationKey::Phase1 => "🔬 阶段 1: 初始化",
            LocalizationKey::Phase2 => "🧠 阶段 2: 贝叶斯优化",
            LocalizationKey::Phase3 => "📊 阶段 3: 聚合和 TOPSIS 排序",
            LocalizationKey::Points => "点",
            LocalizationKey::Measurement => "🔬 测量 {:.4} 毫秒 ({} 次运行，每次 {} 个样本)",
            LocalizationKey::CurrentBest => "当前最佳: {:.4} 毫秒 (分数={:.4})",
            LocalizationKey::TopsisRanking => "🏆 前 5 个最佳值:",
            LocalizationKey::TopResults => "前 5 个最佳值:",
            LocalizationKey::Rank => "排名 {}",
            LocalizationKey::OptimalValue => "✅ 推荐值: {:.4} 毫秒",
            LocalizationKey::OptimalRecommendation => "{} --resolution {} --no-console",
            LocalizationKey::MeasureSleepExe => "MeasureSleep.exe",
            LocalizationKey::SetTimerResolutionExe => "SetTimerResolution.exe",
            LocalizationKey::PressEnter => "⏳ 按 Enter 开始基准测试...",
            LocalizationKey::EnterNewValue => "输入新的 {} (或按 Enter 保持当前值): ",
            LocalizationKey::KeepCurrent => " (当前)",
            LocalizationKey::ResultsSaved => "基准测试成功完成",
            LocalizationKey::ExitPrompt => "按 Enter 退出...",
            LocalizationKey::BenchmarkComplete => "基准测试成功完成",
            LocalizationKey::WarningCleanup => "警告: 无法清理进程: {}",
            LocalizationKey::OptimizationMethod => "🎯 优化方法选择",
            LocalizationKey::AvailableMethods => "可用方法:",
            LocalizationKey::LinearMethod => "线性搜索",
            LocalizationKey::LinearMethodDesc1 => "检查每个指定步长的点",
            LocalizationKey::LinearMethodDesc2 => "保证100%找到全局最优",
            LocalizationKey::LinearMethodDesc3 => "时间: ~50分钟范围0.5-0.6毫秒(步长0.0001)",
            LocalizationKey::LinearMethodDesc4 => "推荐: 用于完全确信",
            LocalizationKey::HybridMethod => "3阶段混合(推荐)",
            LocalizationKey::HybridMethodDesc1 => "贝叶斯 → 局部网格 → 精确细化",
            LocalizationKey::HybridMethodDesc2 => "精度: 高达0.0001毫秒",
            LocalizationKey::HybridMethodDesc3 => "时间: ~5-7分钟",
            LocalizationKey::MethodChoice => "您的选择 (1/2) [默认: 2]: ",
            LocalizationKey::IterationsLinear => "迭代次数: {} (线性搜索)",
            LocalizationKey::IterationsHybrid => "迭代次数: ~50 (3阶段优化)",
            LocalizationKey::IncrementNotUsed => " (在3阶段方法中不使用)",
            LocalizationKey::MeasureSleepTest => "🔍 检查 MeasureSleep.exe...",
            LocalizationKey::WindowsChangesTitle => "Windows 10 2004+ 和 Windows 11: 关键变化",
            LocalizationKey::WindowsChangesPerProcess => "`timeBeginPeriod()` 现在是 **按进程** (非全局)",
            LocalizationKey::WindowsChangesOwnResolution => "每个进程都有自己的计时器分辨率",
            LocalizationKey::WindowsChangesSetAffects => "`SetTimerResolution.exe` 只影响 **其自身进程**",
            LocalizationKey::WindowsChangesMinimized => "**Windows 11**: 最小化窗口可能会失去高分辨率",
            LocalizationKey::WindowsChangesProblem => "**问题**: `MeasureSleep.exe` 作为 **独立进程** 运行且 **无法看到** `SetTimerResolution.exe` 设置的分辨率",
            LocalizationKey::WindowsChangesSeparateProcess => "`MeasureSleep.exe` 作为 **独立进程** 运行",
            LocalizationKey::WindowsChangesCannotSee => "**无法看到** `SetTimerResolution.exe` 设置的分辨率",
            LocalizationKey::WindowsChangesSolution => "**解决方案**: TimerResBenchmark 现在使用 `NtSetTimerResolution` 进行 **全局计时器分辨率** (在 Windows 11 上有效)",
            LocalizationKey::WindowsChangesGlobalResolution => "使用低级 Windows API `NtSetTimerResolution`，为整个系统全局设置计时器分辨率",
            LocalizationKey::WindowsChangesLowLevelApi => "确保基准测试进程和 MeasureSleep.exe 都看到相同的分辨率设置",
            LocalizationKey::LinearMethodTitle => "📏 线性搜索",
            LocalizationKey::LinearMethodParameters => "📊 参数:",
            LocalizationKey::LinearMethodRange => "   范围: [{:.4}, {:.4}] ms",
            LocalizationKey::LinearMethodStep => "   步长: {:.4} ms",
            LocalizationKey::LinearMethodPoints => "   待检查点数: {}",
            LocalizationKey::LinearMethodRuns => "   每点运行次数: 3",
            LocalizationKey::LinearMethodSamples => "   每次运行样本数: {}",
            LocalizationKey::LinearMethodEstimatedTime => "⏱️  预估时间: {:.1} 分钟\n",
            LocalizationKey::LinearMethodCompleted => "✅ 线性搜索完成:",
            LocalizationKey::LinearMethodPointsChecked => "   已检查点数: {}",
            LocalizationKey::LinearMethodUnique => "   唯一值: {}",
            LocalizationKey::UniquePointsMessage => "   唯一点数: {} (已测量: {})",
            LocalizationKey::TestMeasurementMessage => "   测试: Δ={:.4} ms, σ={:.4} ms ✓",
        }
    }
}